{
  "version": 3,
  "sources": ["../../src/togglebutton/style/ToggleButtonStyle.js", "../../src/togglebutton/BaseToggleButton.vue", "../../src/togglebutton/ToggleButton.vue", "../../src/togglebutton/ToggleButton.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/togglebutton';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-togglebutton p-component',\n        {\n            'p-togglebutton-checked': instance.active,\n            'p-invalid': instance.$invalid,\n            'p-togglebutton-sm p-inputfield-sm': props.size === 'small',\n            'p-togglebutton-lg p-inputfield-lg': props.size === 'large'\n        }\n    ],\n    content: 'p-togglebutton-content',\n    icon: 'p-togglebutton-icon',\n    label: 'p-togglebutton-label'\n};\n\nexport default BaseStyle.extend({\n    name: 'togglebutton',\n    style,\n    classes\n});\n", "<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleButtonStyle from 'primevue/togglebutton/style';\n\nexport default {\n    name: 'BaseToggleButton',\n    extends: BaseEditableHolder,\n    props: {\n        onIcon: String,\n        offIcon: String,\n        onLabel: {\n            type: String,\n            default: 'Yes'\n        },\n        offLabel: {\n            type: String,\n            default: 'No'\n        },\n        iconPos: {\n            type: String,\n            default: 'left'\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleButtonStyle,\n    provide() {\n        return {\n            $pcToggleButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-label=\"ariaLabel\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n        :data-p=\"dataP\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\" :data-p=\"dataP\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        },\n        dataP() {\n            return cn({\n                checked: this.active,\n                invalid: this.$invalid,\n                [this.size]: this.size\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <button\n        v-ripple\n        type=\"button\"\n        :class=\"cx('root')\"\n        :tabindex=\"tabindex\"\n        :disabled=\"disabled\"\n        :aria-pressed=\"d_value\"\n        @click=\"onChange\"\n        @blur=\"onBlur\"\n        v-bind=\"getPTOptions('root')\"\n        :aria-label=\"ariaLabel\"\n        :aria-labelledby=\"ariaLabelledby\"\n        :data-p-checked=\"active\"\n        :data-p-disabled=\"disabled\"\n        :data-p=\"dataP\"\n    >\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\" :data-p=\"dataP\">\n            <slot>\n                <slot name=\"icon\" :value=\"d_value\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), d_value ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.writeValue(!this.d_value, event);\n                this.$emit('change', event);\n            }\n        },\n        onBlur(event) {\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        active() {\n            return this.d_value === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.d_value ? this.onLabel : this.offLabel) : '\\u00A0';\n        },\n        dataP() {\n            return cn({\n                checked: this.active,\n                invalid: this.$invalid,\n                [this.size]: this.size\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "_ref", "instance", "props", "active", "$invalid", "size", "content", "icon", "label", "BaseStyle", "extend", "name", "style", "name", "BaseEditableHolder", "props", "onIcon", "String", "offIcon", "onLabel", "type", "offLabel", "iconPos", "readonly", "Boolean", "tabindex", "Number", "ariaLabelledby", "ariaLabel", "size", "style", "ToggleButtonStyle", "provide", "$pcToggleButton", "$parentInstance", "script", "BaseToggleButton", "inheritAttrs", "emits", "methods", "getPTOptions", "key", "_ptm", "ptmi", "ptm", "context", "active", "disabled", "onChange", "event", "writeValue", "d_value", "$emit", "onBlur", "_this$formField$onBlu", "_this$formField", "formField", "call", "computed", "hasLabel", "isNotEmpty", "label", "dataP", "cn", "_defineProperty", "checked", "invalid", "$invalid", "directives", "ripple", "Ripple", "_withDirectives", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "onClick", "$options", "apply", "arguments", "_createElementVNode", "_renderSlot", "$slots", "value"]
}
